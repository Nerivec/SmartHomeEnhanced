alias: Notify
sequence:
  - if:
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: state
                entity_id: input_boolean.sleep_mode
                state: "on"
              - condition: template
                value_template: >-
                  {{ ignore_sleep_mode is not defined or not ignore_sleep_mode
                  }}
          - condition: and
            conditions:
              - condition: state
                entity_id: binary_sensor.any_presence_inside_the_house
                state: "off"
              - condition: template
                value_template: "{{ ignore_presence is not defined or not ignore_presence }}"
    then:
      - if:
          - condition: template
            value_template: "{{ do_not_queue is not defined or not do_not_queue }}"
        then:
          - service: todo.get_items
            target:
              entity_id: todo.queued_notifications
            data:
              status: needs_action
            response_variable: queued_notif
          - if:
              - condition: template
                value_template: >-
                  {%- for summary in queued_notif['todo.queued_notifications']['items'] | map(attribute='summary') %}
                    {%- if summary == message %}
                      {{ false }}
                    {%- endif %}
                  {%- endfor %}

                  {{ true }}
            then:
              - service: todo.add_item
                data:
                  item: "{{ message }}"
                target:
                  entity_id: todo.queued_notifications
    else:
      - variables:
          media_player_entity_ids: |-
            {% set ns = namespace(targets=[] + speak_targets) %}
            {% if speak_on_last_voice_box_triggered %}
              {% set ns.targets = ns.targets + [states('input_text.last_voice_box_triggered')] %}
            {% endif %}
            {% if speak_on_voice_boxes_with_presence %}
              {% if is_state('binary_sensor.ha_motion', 'on') %}
                {% set ns.targets = ns.targets + ['media_player.vlc_telnet'] %}
              {% endif %}
              {% if is_state('binary_sensor.voice_box_motion', 'on') %}
                {% set ns.targets = ns.targets + ['media_player.voice_box_player'] %}
              {% endif %}
            {% endif %}
            {{ ns.targets | unique | list }}
      - wait_template: |
          {% for id in media_player_entity_ids %}
            {% if is_state(id, 'playing') %}
              {{ false }}
            {% endif %}
          {% endfor %}

          {{ true }}
        continue_on_timeout: true
        timeout: "00:00:30"
      - if:
          - condition: template
            value_template: >-
              {{ (bypass_sound_fix is not defined or not bypass_sound_fix) and (media_player_entity_ids | contains('media_player.vlc_telnet')) }}
        then:
          - service: media_player.play_media
            data:
              media_content_id: media-source://media_source/local/bell-ring-1.mp3
              media_content_type: audio/mpeg
            target:
              entity_id: media_player.vlc_telnet
          - delay:
              hours: 0
              minutes: 0
              seconds: 0
              milliseconds: 100
      - service: script.voice_get_greeted_message
        data:
          message: "{{ message }}"
          skip_greeting: "{{ no_greeting == true }}"
          morning: Morning sir.
          afternoon: Afternoon sir.
          evening: Evening sir.
          fallback: Sir?
          fallback_prepend: false
          no_fallback_prepend_wordcount: 8
          last_greeted: >-
            {{ state_attr('script.voice_get_greeted_message', 'last_triggered') | as_local }}
        response_variable: greeted_message
      - service: tts.speak
        target:
          entity_id: tts.piper
        data:
          cache: true
          media_player_entity_id: "{{ media_player_entity_ids }}"
          message: "{{ greeted_message.text }}"
  - if:
      - condition: template
        value_template: "{{ send_to_phone == true }}"
    then:
      - service: notify.mobile_app_xyz_s_phone
        data:
          data: {}
          message: "{{ message }}"
          title: "{{ title }}"
mode: queued
icon: mdi:speaker-message
fields:
  title:
    selector:
      text: null
    name: Title
    default: Home Assistant
    description: For phone notification.
    required: false
  message:
    selector:
      text: null
    name: Message
    required: true
    default: Hey there!
  no_greeting:
    selector:
      boolean: null
    name: No Greeting
    description: >-
      Do not preface message with a greeting. If false, a greeting based on time
      of day and last notify triggered is added automatically.
    required: false
  ignore_sleep_mode:
    selector:
      boolean: null
    name: Ignore Sleep Mode
    description: Voice notify even if sleep mode is ON.
    required: false
  ignore_presence:
    selector:
      boolean: null
    name: Ignore Presence
    description: Voice notify even if no presence is detected in the house.
    required: false
  do_not_queue:
    selector:
      boolean: null
    name: Do Not Queue
    description: >-
      Do not queue notification if sleep mode or presence is not met. Queueing
      is never used if both ignore_sleep_mode and ignore_presence are true.
    required: false
  send_to_phone:
    selector:
      boolean: null
    name: Send to Phone
    description: Send notification to phone.
    required: false
  speak_on_last_voice_box_triggered:
    selector:
      boolean: null
    name: Speak On Last Voice Box Triggered
    description: >-
      Speak on last voice box triggered. Combines with speak_targets and
      speak_on_voice_boxes_with_presence automatically.
    required: true
    default: true
  speak_on_voice_boxes_with_presence:
    selector:
      boolean: null
    name: Speak On Voice Boxes with Presence
    description: >-
      Speak on voice boxes where presence is detected (motion, etc...). Combines
      with speak_targets and speak_on_last_voice_box_triggered automatically.
    required: true
  speak_targets:
    selector:
      select:
        multiple: true
        options:
          - label: HA
            value: media_player.vlc_telnet
          - label: Voice Box
            value: media_player.voice_box_player
          - label: All
            value: media_player.all_media_players
    name: Speak Targets
    description: >-
      Specific targets for speech output. Combines with
      speak_on_last_voice_box_triggered and speak_on_voice_boxes_with_presence
      automatically.
    required: true
  bypass_sound_fix:
    selector:
      boolean: null
    default: false
    name: Bypass Sound Fix
    description: >-
      Set to true if you intend to wake up the speaker with another sound (or
      don't need to).
max: 20
