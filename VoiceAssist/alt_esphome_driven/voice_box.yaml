esphome:
  name: voice_box
  on_boot:
    priority: 600.0
    then:
      - delay: 30s
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;

# NOTE: don't forget the rest

globals:
  - id: init_in_progress
    type: bool
    restore_value: no
    initial_value: 'true'

i2s_audio:
  - id: i2s_in
    # WS on INMP441
    i2s_lrclk_pin: 4
    # SCK on INMP441
    i2s_bclk_pin: 5
  - id: i2s_out
    # LCK on PCM5102
    i2s_lrclk_pin: 2
    # BCK on PCM5102
    i2s_bclk_pin: 7

microphone:
  - platform: i2s_audio
    id: vb_mic
    # SD on INMP441
    i2s_din_pin: 6
    i2s_audio_id: i2s_in
    adc_type: external
    pdm: false
    channel: right
    bits_per_sample: 32bit

# Currently requires "framework: arduino"
media_player:
  - platform: i2s_audio
    id: player
    name: "Player"
    # DIN on PCM5102a
    i2s_dout_pin: 8
    i2s_audio_id: i2s_out
    dac_type: external
    mode: stereo
    on_play:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - voice_assistant.stop
    on_idle:
      - if:
          condition:
            and:
              - switch.is_on: use_wake_word
              - not:
                - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous

voice_assistant:
  id: vb_va
  microphone: vb_mic
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  use_wake_word: true
  on_stt_vad_start:
    - homeassistant.service:
        service: input_text.set_value
        data:
          value: media_player.voice_box_player
          entity_id: input_text.last_voice_box_triggered
  on_tts_start:
    - homeassistant.service:
        service: script.esphome_notify
        data:
          target: media_player.voice_box_player
        data_template:
          message: "{{ msg }}"
        variables:
          msg: return x;
  on_client_connected:
    - if:
        condition:
          - switch.is_on: use_wake_word
        then:
          - lambda: id(vb_va).set_use_wake_word(true);
          - if:
              condition:
                not:
                  - voice_assistant.is_running
              then:
                - voice_assistant.start_continuous
    - lambda: id(init_in_progress) = false;
  on_client_disconnected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.stop

switch:
  - platform: template
    id: use_wake_word
    name: Wake Word Enabled
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - lambda: id(vb_va).set_use_wake_word(true);
            - if:
                condition:
                  not:
                    - voice_assistant.is_running
                then:
                  - voice_assistant.start_continuous
    on_turn_off:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - voice_assistant.stop
            - lambda: id(vb_va).set_use_wake_word(false);
  - platform: template
    id: listen_once
    name: Listen Once
    optimistic: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - switch.turn_off: use_wake_word
            - delay: 0.5s
            - voice_assistant.start
    on_turn_off:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - switch.turn_on: use_wake_word
