intent_script:
  HereGetTemperature:
    speech:
      text: |-
        {% set entity_id = expand(area_entities(area_name(states('input_text.last_voice_box_triggered')))) | selectattr('attributes.device_class', 'eq', 'temperature') | map(attribute='entity_id') | first %}
        {% if entity_id %}
          {{ ["Temperature is", "It's"] | random }} {{ states(entity_id) | float | round(1) }}° in here.
        {% elif has_value("sensor.mean_house_temperature") %}
          Mean temperature for the house is {{ states("sensor.mean_house_temperature") | float | round(1) }}°.
        {% endif %}
  HereGetHumidity:
    speech:
      text: |-
        {% set entity_id = expand(area_entities(area_name(states('input_text.last_voice_box_triggered')))) | selectattr('attributes.device_class', 'eq', 'humidity') | map(attribute='entity_id') | first %}
        {% if entity_id %}
          Humidity is {{ states(entity_id) | float | round(0) }}% in here.
        {% elif has_value("sensor.mean_house_humidity") %}
          Mean humidity for the house is {{ states("sensor.mean_house_humidity") | float | round(0) }}%.
        {% endif %}
  HereSetVolume:
    action:
      service: "media_player.volume_set"
      data:
        entity_id: "{{ states('input_text.last_voice_box_triggered') }}"
        volume_level: "{{ volume / 100.0 }}"
  HereVolumeUp:
    action:
      service: "media_player.volume_up"
      data:
        entity_id: "{{ states('input_text.last_voice_box_triggered') }}"
  HereVolumeDown:
    action:
      service: "media_player.volume_down"
      data:
        entity_id: "{{ states('input_text.last_voice_box_triggered') }}"
  HereMuteVolume:
    action:
      service: "media_player.volume_mute"
      data:
        entity_id: "{{ states('input_text.last_voice_box_triggered') }}"
        is_volume_muted: "true"
  HereUnmuteVolume:
    action:
      service: "media_player.volume_mute"
      data:
        entity_id: "{{ states('input_text.last_voice_box_triggered') }}"
        is_volume_muted: "false"
  GetWeather:
    action:
      - service: script.voice_get_climate_outside
        response_variable: climate_outside
      - service: script.voice_get_current_weather
        response_variable: current_weather
      - variables:
          result:
            climate_outside: "{{ climate_outside }}"
            current_weather: "{{ current_weather }}"
      - stop: "done"
        response_variable: result
    speech:
      text: "{{ action_response.climate_outside.text }} {{ action_response.current_weather.text }}"
  GetForecast:
    action:
      - service: script.voice_get_7d_forecast
        data:
          return_unavailable: true
        response_variable: forecast
      - stop: "done"
        response_variable: forecast
    speech:
      text: "{{ action_response.text }}"
  GetForecastTomorrow:
    action:
      - service: script.voice_get_tomorrow_forecast
        data:
          return_unavailable: true
        response_variable: forecast
      - stop: "done"
        response_variable: forecast
    speech:
      text: "{{ action_response.text }}"
  ReportClimate:
    action:
      - service: script.voice_get_climate_inside
        response_variable: climate_inside
      - stop: "done"
        response_variable: climate_inside
    speech:
      text: "{{ action_response.text }}"
  GetSolarProduction:
    action:
      - service: script.voice_get_current_solar_production
        response_variable: solar_production
      - stop: "done"
        response_variable: solar_production
    speech:
      text: "{{ action_response.text }}"
  SleepModeOn:
    action:
      service: "input_boolean.turn_on"
      data:
        entity_id: "input_boolean.sleep_mode"
  SleepModeOff:
    action:
      service: "input_boolean.turn_off"
      data:
        entity_id: "input_boolean.sleep_mode"
  AreaManualModeOn:
    action:
      service: "input_boolean.turn_on"
      data:
        entity_id: "{{ manual_area_mode }}"
    speech:
      text: "Done"
  AreaManualModeOff:
    action:
      service: "input_boolean.turn_off"
      data:
        entity_id: "{{ manual_area_mode }}"
    speech:
      text: "Done"
  GetTime:
    speech:
      text: >-
        {{ ["The time is", "It's", ""] | random }} {{ as_timestamp(now()) | timestamp_custom('%I:%M%p') }}
  GetDate:
    speech:
      text: >-
        {{ ["The day is", "Today is", "It's"] | random }} {{ as_timestamp(now()) | timestamp_custom('%A, %B %d') }}
  GetFutureDate:
    speech:
      text: >-
        {{ ["The date will be", "It will be"] | random }} {{ as_timestamp(now() + timedelta(weeks=(weeks | int(0)), days=(days | int(0)), hours=(hours | int(0)))) | timestamp_custom('%A, %B %d') }}
  StartTimer:
    action:
      - service: script.voice_start_timer
        data:
          hours: "{{ hours | int(0) }}"
          minutes: "{{ minutes | int(0) }}"
          seconds: "{{ seconds | int(0) }}"
        response_variable: result
      - stop: "done"
        response_variable: result
    speech:
      text: "{{ action_response.text }}"
  CancelTimer:
    action:
      service: "timer.cancel"
      data:
        entity_id: "{{ entity_id }}"
    speech:
      text: "{{ state_attr(entity_id, 'friendly_name') }} cancelled."
  AddToTimer:
    action:
      - service: script.voice_add_to_timer
        data:
          hours: "{{ hours | int(0) }}"
          minutes: "{{ minutes | int(0) }}"
          seconds: "{{ seconds | int(0) }}"
          entity_id: "{{ entity_id }}"
        response_variable: result
      - stop: "done"
        response_variable: result
    speech:
      text: "{{ action_response.text }}"
  RemoveFromTimer:
    action:
      - service: script.voice_remove_from_timer
        data:
          hours: "{{ hours | int(0) }}"
          minutes: "{{ minutes | int(0) }}"
          seconds: "{{ seconds | int(0) }}"
          entity_id: "{{ entity_id }}"
        response_variable: result
      - stop: "done"
        response_variable: result
    speech:
      text: "{{ action_response.text }}"
  PauseTimer:
    action:
      service: "timer.pause"
      data:
        entity_id: "{{ entity_id }}"
  ResumeTimer:
    action:
      service: "timer.start"
      data:
        entity_id: "{{ entity_id }}"
  ListTimers:
    action:
      - service: script.voice_list_timers
        response_variable: timers
      - stop: "done"
        response_variable: timers
    speech:
      text: "{{ action_response.text }}"
  GetTimer:
    action:
      - service: script.voice_get_timer
        data:
          entity_id: "{{ entity_id }}"
        response_variable: timer
      - stop: "done"
        response_variable: timer
    speech:
      text: "{{ action_response.text }}"
  SetWakeUpAlarmTime:
    action:
      - service: script.voice_set_wake_up_alarm_time
        data:
          hours: "{{ hours | int(0) }}"
          minutes: "{{ minutes | int(0) }}"
          ampm: "{{ ampm }}"
        response_variable: result
      - stop: "done"
        response_variable: result
    speech:
      text: "{{ action_response.text }}"
  CancelWakeUpAlarm:
    action:
      - service: automation.turn_off
        data:
          entity_id: "automation.wake_up_alarm_time_triggers"
    speech:
      text: "Alarm cancelled."
  IsWakeUpAlarmSet:
    speech:
      text: |-
        {%- if is_state('automation.wake_up_alarm_time_triggers', 'on') %}
          {%- set alarm_time = states('input_datetime.wake_up_alarm_time') %}
          Yes, your alarm is set for {{ as_timestamp(alarm_time) | timestamp_custom('%I:%M%p') }}{%- if (as_datetime(alarm_time) | as_local) > today_at("23:59") %} tomorrow {%- endif %}.
        {%- else %}
          No, your alarm is not set.
        {%- endif %}
